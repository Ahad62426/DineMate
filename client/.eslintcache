[{"/home/ubuntu/DineMate_Dev/client/src/index.js":"1","/home/ubuntu/DineMate_Dev/client/src/redux/store.js":"2","/home/ubuntu/DineMate_Dev/client/src/views/App.js":"3","/home/ubuntu/DineMate_Dev/client/src/constants/index.js":"4","/home/ubuntu/DineMate_Dev/client/src/redux/epics/index.js":"5","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/index.js":"6","/home/ubuntu/DineMate_Dev/client/src/redux/actions/index.js":"7","/home/ubuntu/DineMate_Dev/client/src/helpers/index.js":"8","/home/ubuntu/DineMate_Dev/client/src/views/Toaster/index.js":"9","/home/ubuntu/DineMate_Dev/client/src/views/Admin/index.js":"10","/home/ubuntu/DineMate_Dev/client/src/views/AdminLogin/index.js":"11","/home/ubuntu/DineMate_Dev/client/src/views/ForgotPassword/index.js":"12","/home/ubuntu/DineMate_Dev/client/src/views/CreatePassword/index.js":"13","/home/ubuntu/DineMate_Dev/client/src/views/Restaurants/index.js":"14","/home/ubuntu/DineMate_Dev/client/src/views/Menu/index.js":"15","/home/ubuntu/DineMate_Dev/client/src/views/NoRoute/index.js":"16","/home/ubuntu/DineMate_Dev/client/src/services/network/index.js":"17","/home/ubuntu/DineMate_Dev/client/src/constants/Actions.js":"18","/home/ubuntu/DineMate_Dev/client/src/constants/Apis.js":"19","/home/ubuntu/DineMate_Dev/client/src/constants/Data.js":"20","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/sessionReducer.js":"21","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/restaurantsReducer.js":"22","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/restaurantReducer.js":"23","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/toastReducer.js":"24","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/loginEpic.js":"25","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/forgotPasswordEpic.js":"26","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/createPasswordEpic.js":"27","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/getAllRestaurantsEpic.js":"28","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/addRestaurantEpic.js":"29","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/generateQrsEpic.js":"30","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/getExistingQrsEpic.js":"31","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/setTableNameEpic.js":"32","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/getSuperAdminDashboardEpic.js":"33","/home/ubuntu/DineMate_Dev/client/src/helpers/dateTime/index.js":"34","/home/ubuntu/DineMate_Dev/client/src/helpers/localStorage/index.js":"35","/home/ubuntu/DineMate_Dev/client/src/views/Admin/SideBar/index.js":"36","/home/ubuntu/DineMate_Dev/client/src/views/Admin/NavBar/index.js":"37","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Restaurants/index.js":"38","/home/ubuntu/DineMate_Dev/client/src/views/Admin/GenerateQrs/index.js":"39","/home/ubuntu/DineMate_Dev/client/src/views/Admin/ViewQr/index.js":"40","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Tables/index.js":"41","/home/ubuntu/DineMate_Dev/client/src/views/Admin/TableDetails/index.js":"42","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Others/index.js":"43","/home/ubuntu/DineMate_Dev/client/src/components/index.js":"44","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Dashboard/SuperAdmin/index.js":"45","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Dashboard/RestaurantAdmin/index.js":"46","/home/ubuntu/DineMate_Dev/client/src/views/Admin/AddRestaurant/index.js":"47","/home/ubuntu/DineMate_Dev/client/src/views/Admin/EditRestaurant/index.js":"48","/home/ubuntu/DineMate_Dev/client/src/redux/epics/generalizedEpic.js":"49","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Restaurants/RestaurantsList/index.js":"50","/home/ubuntu/DineMate_Dev/client/src/views/Admin/GenerateQrs/QrsList/index.js":"51","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Tables/TablesList/index.js":"52","/home/ubuntu/DineMate_Dev/client/src/components/DineMateTitle/index.js":"53","/home/ubuntu/DineMate_Dev/client/src/components/Title/index.js":"54","/home/ubuntu/DineMate_Dev/client/src/components/SmallTitle/index.js":"55","/home/ubuntu/DineMate_Dev/client/src/components/Input/index.js":"56","/home/ubuntu/DineMate_Dev/client/src/components/Button/index.js":"57","/home/ubuntu/DineMate_Dev/client/src/components/SmallButton/index.js":"58","/home/ubuntu/DineMate_Dev/client/src/components/SmallButtonRed/index.js":"59","/home/ubuntu/DineMate_Dev/client/src/components/SectionHeading/index.js":"60","/home/ubuntu/DineMate_Dev/client/src/components/DashboardBatches/index.js":"61"},{"size":272,"mtime":1611985659708,"results":"62","hashOfConfig":"63"},{"size":759,"mtime":1611985659708,"results":"64","hashOfConfig":"63"},{"size":3267,"mtime":1611985659708,"results":"65","hashOfConfig":"63"},{"size":71,"mtime":1611985659708,"results":"66","hashOfConfig":"63"},{"size":996,"mtime":1611985659708,"results":"67","hashOfConfig":"63"},{"size":355,"mtime":1611985659708,"results":"68","hashOfConfig":"63"},{"size":109,"mtime":1611985659708,"results":"69","hashOfConfig":"63"},{"size":57,"mtime":1611985659708,"results":"70","hashOfConfig":"63"},{"size":930,"mtime":1611985659708,"results":"71","hashOfConfig":"63"},{"size":3450,"mtime":1611985659708,"results":"72","hashOfConfig":"63"},{"size":1899,"mtime":1611985659708,"results":"73","hashOfConfig":"63"},{"size":1689,"mtime":1611985659708,"results":"74","hashOfConfig":"63"},{"size":1992,"mtime":1611985659708,"results":"75","hashOfConfig":"63"},{"size":143,"mtime":1611985659708,"results":"76","hashOfConfig":"63"},{"size":277,"mtime":1611985659708,"results":"77","hashOfConfig":"63"},{"size":144,"mtime":1611985659708,"results":"78","hashOfConfig":"63"},{"size":301,"mtime":1611985659708,"results":"79","hashOfConfig":"63"},{"size":2245,"mtime":1611985659708,"results":"80","hashOfConfig":"63"},{"size":739,"mtime":1611993244742,"results":"81","hashOfConfig":"63"},{"size":7499,"mtime":1611985659708,"results":"82","hashOfConfig":"63"},{"size":1439,"mtime":1611985659708,"results":"83","hashOfConfig":"63"},{"size":951,"mtime":1611985659708,"results":"84","hashOfConfig":"63"},{"size":1251,"mtime":1611985659708,"results":"85","hashOfConfig":"63"},{"size":2232,"mtime":1611985659708,"results":"86","hashOfConfig":"63"},{"size":980,"mtime":1611985659708,"results":"87","hashOfConfig":"63"},{"size":829,"mtime":1611985659708,"results":"88","hashOfConfig":"63"},{"size":867,"mtime":1611985659708,"results":"89","hashOfConfig":"63"},{"size":1116,"mtime":1611985659708,"results":"90","hashOfConfig":"63"},{"size":842,"mtime":1611985659708,"results":"91","hashOfConfig":"63"},{"size":799,"mtime":1611985659708,"results":"92","hashOfConfig":"63"},{"size":1024,"mtime":1611985659708,"results":"93","hashOfConfig":"63"},{"size":858,"mtime":1611985659708,"results":"94","hashOfConfig":"63"},{"size":864,"mtime":1611985659708,"results":"95","hashOfConfig":"63"},{"size":470,"mtime":1611985659708,"results":"96","hashOfConfig":"63"},{"size":248,"mtime":1611985659708,"results":"97","hashOfConfig":"63"},{"size":5246,"mtime":1611985659708,"results":"98","hashOfConfig":"63"},{"size":1280,"mtime":1611985659708,"results":"99","hashOfConfig":"63"},{"size":2575,"mtime":1611985659708,"results":"100","hashOfConfig":"63"},{"size":2973,"mtime":1611985659708,"results":"101","hashOfConfig":"63"},{"size":1084,"mtime":1611985659708,"results":"102","hashOfConfig":"63"},{"size":2187,"mtime":1611985659708,"results":"103","hashOfConfig":"63"},{"size":3927,"mtime":1611985659708,"results":"104","hashOfConfig":"63"},{"size":133,"mtime":1611985659708,"results":"105","hashOfConfig":"63"},{"size":264,"mtime":1611985659708,"results":"106","hashOfConfig":"63"},{"size":2132,"mtime":1611985659708,"results":"107","hashOfConfig":"63"},{"size":2123,"mtime":1611985659708,"results":"108","hashOfConfig":"63"},{"size":8373,"mtime":1611985659708,"results":"109","hashOfConfig":"63"},{"size":8378,"mtime":1611985659708,"results":"110","hashOfConfig":"63"},{"size":1438,"mtime":1611985659708,"results":"111","hashOfConfig":"63"},{"size":2199,"mtime":1611985659708,"results":"112","hashOfConfig":"63"},{"size":1896,"mtime":1611985659708,"results":"113","hashOfConfig":"63"},{"size":1513,"mtime":1611985659708,"results":"114","hashOfConfig":"63"},{"size":197,"mtime":1611985659704,"results":"115","hashOfConfig":"63"},{"size":177,"mtime":1611985659708,"results":"116","hashOfConfig":"63"},{"size":192,"mtime":1611985659708,"results":"117","hashOfConfig":"63"},{"size":309,"mtime":1611985659708,"results":"118","hashOfConfig":"63"},{"size":1386,"mtime":1611985659704,"results":"119","hashOfConfig":"63"},{"size":1436,"mtime":1611985659708,"results":"120","hashOfConfig":"63"},{"size":1466,"mtime":1611985659708,"results":"121","hashOfConfig":"63"},{"size":261,"mtime":1611985659708,"results":"122","hashOfConfig":"63"},{"size":315,"mtime":1611985659704,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"17em1k4",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"126"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"126"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"126"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"126"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"126"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"126"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"126"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"126"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"126"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"126"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"126"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"126"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"126"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"126"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"126"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"126"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"/home/ubuntu/DineMate_Dev/client/src/index.js",[],["265","266"],"/home/ubuntu/DineMate_Dev/client/src/redux/store.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/App.js",["267"],"import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport { ToastProvider } from 'react-toast-notifications'\n\nimport { customisedAction } from '../redux/actions'\nimport { SESSION_CHECK_DONE, SET_SESSION } from '../constants'\nimport { RestClient } from '../services/network'\nimport { getItem } from '../helpers'\n\nimport Toaster from './Toaster'\nimport Admin from './Admin'\nimport AdminLogin from './AdminLogin'\nimport ForgotPassword from './ForgotPassword'\nimport CreatePassword from './CreatePassword'\nimport Restaurants from './Restaurants'\nimport Menu from './Menu'\nimport NoRoute from './NoRoute'\n\nimport logo from '../assets/logo.png'\nimport './styles.css'\n\nexport default function App(props) {\n\n    const checkingSignIn = useSelector(({ sessionReducer }) => sessionReducer.checkingSignIn)\n    const admin = useSelector(({ sessionReducer }) => sessionReducer.admin)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!admin) {\n        const storedAdmin = getItem('admin')\n        if (storedAdmin)\n            setTimeout(() => {\n                RestClient.setHeader('Authorization', storedAdmin.id)\n                dispatch(customisedAction(SET_SESSION, { admin: storedAdmin }))\n            }, 300)\n        else\n            setTimeout(() => dispatch(customisedAction(SESSION_CHECK_DONE)), 300)\n        }\n    }, [])\n\n    const AdminLanding = ({ component: Component, ...rest }) => (\n        <Route {...rest} render={(props) => (\n            !!admin ? \n            <Component {...props} /> : <Redirect to={{ pathname: '/adminLogin', state: { from: props.location.pathname } }} />\n        )} />\n    )\n\n    const CustomerLanding = ({ component: Component, ...rest }) => (\n        <Route {...rest} render={(props) => (\n            !admin ? \n            <Component {...props} /> : <Redirect to={{ pathname: '/admin' }} />\n        )} />\n    )\n\n    return (!checkingSignIn ?\n        <ToastProvider\n            autoDismiss\n            autoDismissTimeout={6000}>\n            <Router>\n                <Toaster />\n                <Switch>\n                    <Route exact path='/'>\n                        <Redirect to='/admin' />\n                    </Route>\n                    <AdminLanding path='/admin' component={Admin} />\n                    <CustomerLanding path='/restaurants' component={Restaurants} />\n                    <CustomerLanding exact path='/restaurant/:restaurantId/menu/' component={Menu} />\n                    <CustomerLanding exact path='/restaurant/:restaurantId/:tableId' component={Menu} />\n                    <CustomerLanding path='/adminLogin' component={AdminLogin} />\n                    <CustomerLanding path='/forgotPassword' component={ForgotPassword} />\n                    <CustomerLanding path='/createPassword/:restaurantId/:email/:hashString' component={CreatePassword} />\n                    <Route component={NoRoute} />\n                </Switch>\n            </Router>\n        </ToastProvider> :\n        <div className=\"full-screen-container\" style={{ background: 'rgba(62, 161, 117, 0.3)'}}>\n            <img src={logo} style={{ width: '120px' }} alt=\"logo\" />\n        </div>\n    )\n}","/home/ubuntu/DineMate_Dev/client/src/constants/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/reducers/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/actions/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/helpers/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Toaster/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Admin/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/AdminLogin/index.js",["268"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { customisedAction } from '../../redux/actions'\nimport { ADMIN_SIGN_IN, SET_TOAST_DISMISSING } from '../../constants'\n\nimport { DineMateTitle, Title, Input, Button } from '../../components'\n\nimport logo from '../../assets/logo.png'\n\nimport './styles.css'\n\nfunction AdminLogin(props) {\n\n  const [email, setemail] = useState('')\n  const [password, setpassword] = useState('')\n\n  const admin = useSelector(({ sessionReducer }) => sessionReducer.admin)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (admin)\n      props.history.replace('/admin')\n  }, [admin])\n\n  return (\n    <div className=\"full-screen-container login-screen\">\n      <div className=\"login-logo-container\">\n          <img src={logo} alt=\"logo\" />\n          <DineMateTitle />\n      </div>\n      <div className=\"login-container\">\n        <div className=\"login-title-container\">\n          <Title text=\"Admin Login\" />\n        </div>\n        <Input \n          style={{ width: '80%' }}\n          placeholder=\"Enter Email\"\n          value={email}\n          onChange={({ target: { value } }) => setemail(value)}\n        />\n        <Input \n          style={{ width: '80%' }}\n          placeholder=\"Enter Password\"\n          value={password}\n          onChange={({ target: { value } }) => setpassword(value)}\n        />\n        <div className=\"login-button-container\">\n          <Button\n            onClick={() => {\n              dispatch(customisedAction(SET_TOAST_DISMISSING, true))\n              dispatch(customisedAction(ADMIN_SIGN_IN, { email, password }))\n            }}\n            text=\"Login\"\n          />\n        </div>\n        <Link style={{ marginTop: '10px' }} to=\"/forgotPassword\">Forgot Password ?</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default AdminLogin\n","/home/ubuntu/DineMate_Dev/client/src/views/ForgotPassword/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/CreatePassword/index.js",["269"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link, useParams } from \"react-router-dom\";\n\nimport { customisedAction } from '../../redux/actions'\nimport { CREATE_PASSWORD, SET_TOAST_DISMISSING } from '../../constants'\n\nimport { DineMateTitle, Title, Input, Button } from '../../components'\n\nimport logo from '../../assets/logo.png'\n\nfunction CreatePassword(props) {\n  \n  const [password, setpassword] = useState('')\n\n  const admin = useSelector(({ sessionReducer }) => sessionReducer.admin)\n  const dispatch = useDispatch()\n\n  let { restaurantId, email, hashString } = useParams();\n\n  useEffect(() => {\n    if (admin)\n      props.history.replace('/admin')\n  }, [admin])\n\n  return (\n    <div className=\"full-screen-container login-screen\">\n      <div className=\"login-logo-container\">\n          <img src={logo} alt=\"logo\" />\n          <DineMateTitle />\n      </div>\n      <div className=\"login-container\">\n        <div className=\"login-title-container\">\n          <Title text=\"Create Password\" />\n        </div>\n        <div style={{ width: '80%' }}>\n          <h4>Restaurant ID:</h4>\n          <p style={{ marginBottom: '10px' }}>{restaurantId}</p>\n          <h4>Email:</h4>\n          <p style={{ marginBottom: '5px' }}>{email}</p>\n        </div>\n        <Input \n          style={{ width: '80%' }}\n          placeholder=\"Enter Password\"\n          value={password}\n          onChange={({ target: { value } }) => setpassword(value)}\n        />\n        <div className=\"login-button-container\">\n          <Button\n            onClick={() => {\n              dispatch(customisedAction(SET_TOAST_DISMISSING, true))\n              dispatch(customisedAction(CREATE_PASSWORD, { restaurantId, email, password, hashString }))\n            }}\n            text=\"Submit\"\n          />\n        </div>\n        <Link style={{ marginTop: '10px' }} to=\"/adminLogin\">Go to Login ?</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default CreatePassword\n","/home/ubuntu/DineMate_Dev/client/src/views/Restaurants/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Menu/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/NoRoute/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/services/network/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/constants/Actions.js",[],"/home/ubuntu/DineMate_Dev/client/src/constants/Apis.js",[],"/home/ubuntu/DineMate_Dev/client/src/constants/Data.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/reducers/sessionReducer.js",["270"],"import { \n  SET_SESSION, SESSION_CHECK_DONE,\n  ADMIN_LOGOUT,\n  SET_RESTAURANT, RESET_RESTAURANT,\n  GET_SUPER_ADMIN_DASHBOARD, GET_SUPER_ADMIN_DASHBOARD_SUCCESS, GET_SUPER_ADMIN_DASHBOARD_FAILURE\n} from '../../constants'\n\nexport default (state = { checkingSignIn: true,\n  admin: null, fetchingDashboard: false,\n  adminDashboard: null, restaurantDashboard: null\n}, { type, payload }) => {\n  switch (type) {\n    case SET_SESSION:\n      return { ...state, checkingSignIn: false, admin: payload.admin }\n    case SESSION_CHECK_DONE:\n      return { ...state, checkingSignIn: false }\n    case ADMIN_LOGOUT:\n      return { ...state, admin: null }\n    case SET_RESTAURANT: {\n      const newAdmin = state.admin\n      newAdmin.restaurantId = payload.restaurantId\n      newAdmin.restaurantName = payload.restaurantName\n      return { ...state, admin: newAdmin, restaurantDashboard: null }\n    }\n    case RESET_RESTAURANT: {\n      const newAdmin = state.admin\n      newAdmin.restaurantId = null\n      newAdmin.restaurantName = null\n      return { ...state, admin: newAdmin }\n    }\n    case GET_SUPER_ADMIN_DASHBOARD:\n      return { ...state, fetchingDashboard: true }\n    case GET_SUPER_ADMIN_DASHBOARD_SUCCESS:\n      return { ...state, fetchingDashboard: false, adminDashboard: payload, restaurantDashboard: payload }\n    case GET_SUPER_ADMIN_DASHBOARD_FAILURE:\n      return { ...state, fetchingDashboard: false }\n    default:\n      return state\n  }\n}\n","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/restaurantsReducer.js",["271"],"import {\n  GET_ALL_RESTAURANTS,\n  GET_ALL_RESTAURANTS_SUCCESS,\n  GET_ALL_RESTAURANTS_FAILURE,\n  ADD_RESTAURANT,\n  ADD_RESTAURANT_SUCCESS,\n  ADD_RESTAURANT_FAILURE\n} from '../../constants'\n\nexport default (state = {\n  fetchingRestaurants: false,\n  addingUpdatingRestaurant: false,\n  restaurants: null\n}, { type, payload }) => {\n  switch (type) {\n    case GET_ALL_RESTAURANTS:\n      return { ...state, fetchingRestaurants: true }\n    case GET_ALL_RESTAURANTS_SUCCESS:\n      return { ...state, fetchingRestaurants: false, restaurants: payload.restaurants }\n    case GET_ALL_RESTAURANTS_FAILURE:\n      return { ...state, fetchingRestaurants: false }\n    case ADD_RESTAURANT:\n      return { ...state, addingUpdatingRestaurant: true }\n    case ADD_RESTAURANT_SUCCESS:\n      return { ...state, addingUpdatingRestaurant: false }\n    case ADD_RESTAURANT_FAILURE:\n      return { ...state, addingUpdatingRestaurant: false }\n    default:\n      return state\n  }\n}\n","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/restaurantReducer.js",["272"],"import {\n  GET_EXISTING_QRS,\n  GET_EXISTING_QRS_SUCCESS,\n  GET_EXISTING_QRS_FAILURE,\n  RESTAURANT_CHANGED,\n  SET_RESTAURANT,\n  GENERATE_QRS,\n  GENERATE_QRS_SUCCESS,\n  GENERATE_QRS_FAILURE,\n  SET_TABLE_NAME,\n  SET_TABLE_NAME_FAILURE\n} from '../../constants'\n\nexport default (state = { fetchingQrs: false, generatingQrs: false, qrs: null, settingTableName: false }, { type, payload }) => {\n  switch (type) {\n    case GET_EXISTING_QRS:\n      return { ...state, fetchingQrs: true, settingTableName: false }\n    case GET_EXISTING_QRS_SUCCESS:\n      return { ...state, fetchingQrs: false, qrs: payload }\n    case GET_EXISTING_QRS_FAILURE:\n      return { ...state, fetchingQrs: false }\n    case GENERATE_QRS:\n      return { ...state, generatingQrs: true }\n    case GENERATE_QRS_SUCCESS:\n      return { ...state, generatingQrs: false, fetchingQrs: true }\n    case GENERATE_QRS_FAILURE:\n      return { ...state, generatingQrs: false }\n    case RESTAURANT_CHANGED:\n      return { ...state, qrs: null }\n    case SET_RESTAURANT:\n      return { ...state, qrs: null }\n    case SET_TABLE_NAME:\n      return { ...state, settingTableName: true }\n    case SET_TABLE_NAME_FAILURE:\n      return { ...state, settingTableName: false }\n    default:\n      return state\n  }\n}\n","/home/ubuntu/DineMate_Dev/client/src/redux/reducers/toastReducer.js",["273"],"import { \n  SET_TOAST, RESET_TOAST, SET_TOAST_DISMISSING,\n  ADMIN_SIGN_IN_FAILURE,\n  FORGOT_PASSWORD_SUCCESS,\n  FORGOT_PASSWORD_FAILURE,\n  CREATE_PASSWORD_FAILURE,\n  GET_ALL_RESTAURANTS_FAILURE,\n  ADD_RESTAURANT_SUCCESS,\n  ADD_RESTAURANT_FAILURE,\n  GENERATE_QRS,\n  GENERATE_QRS_SUCCESS,\n  GENERATE_QRS_FAILURE,\n  GET_EXISTING_QRS_FAILURE,\n  ADD_RESTAURANT,\n  SET_TABLE_NAME,\n  GET_EXISTING_QRS,\n  SET_TABLE_NAME_FAILURE,\n  GET_SUPER_ADMIN_DASHBOARD_FAILURE\n} from '../../constants'\n\nexport default (state = { toast: null, toastSetDismiss: false }, { type, payload }) => {\n  switch (type) {\n    case SET_TOAST:\n      return { ...state, toast: payload }\n    case RESET_TOAST:\n      return { ...state, toast: null }\n    case SET_TOAST_DISMISSING:\n      return { ...state, toastSetDismiss: payload }\n    case ADMIN_SIGN_IN_FAILURE:\n      return { ...state, toast: payload }\n    case FORGOT_PASSWORD_SUCCESS:\n      return { ...state, toast: payload }\n    case FORGOT_PASSWORD_FAILURE:\n      return { ...state, toast: payload }\n    case CREATE_PASSWORD_FAILURE:\n      return { ...state, toast: payload }\n    case GET_ALL_RESTAURANTS_FAILURE:\n      return { ...state, toast: payload }\n    case GET_EXISTING_QRS_FAILURE:\n      return { ...state, toast: payload }\n    case GENERATE_QRS:\n      return { ...state, toast: { message: 'Generating QR', type: 'success' } }\n    case GENERATE_QRS_SUCCESS:\n      return { ...state, toastSetDismiss: true }\n    case GENERATE_QRS_FAILURE:\n      return { ...state, toastSetDismiss: true, toast: payload }\n    case ADD_RESTAURANT:\n      return { ...state, toast: { message: 'Adding Restaurant', type: 'success' } }\n    case ADD_RESTAURANT_SUCCESS:\n      return { ...state, toastSetDismiss: true }\n    case ADD_RESTAURANT_FAILURE:\n      return { ...state, toastSetDismiss: true, toast: payload }\n    case SET_TABLE_NAME:\n      return { ...state, toast: { message: 'Updating Table Name', type: 'success' } }\n    case GET_EXISTING_QRS:\n      return { ...state, toastSetDismiss: true }\n    case SET_TABLE_NAME_FAILURE:\n      return { ...state, toastSetDismiss: true, toast: payload }\n    case GET_SUPER_ADMIN_DASHBOARD_FAILURE:\n      return { ...state, toast: payload }\n    default:\n      return state\n  }\n}\n","/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/loginEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/forgotPasswordEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/createPasswordEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/getAllRestaurantsEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/addRestaurantEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/generateQrsEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/getExistingQrsEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/setTableNameEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/redux/epics/admin/getSuperAdminDashboardEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/helpers/dateTime/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/helpers/localStorage/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Admin/SideBar/index.js",["274"],"import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Link, useRouteMatch, withRouter } from 'react-router-dom'\n\nimport { DineMateTitle, SmallButtonRed } from '../../../components'\n\nimport logo from '../../../assets/logo.png'\nimport './styles.css'\nimport { customisedAction } from '../../../redux/actions'\nimport { RESET_RESTAURANT } from '../../../constants'\n\nfunction SideBar(props) {\n    \n    const dispatch = useDispatch()\n    let { url } = useRouteMatch()\n    const { admin, sidebarOpen, closeSidebar, location } = props\n    const { pathname } = location\n\n    return (<div className={sidebarOpen ? \"sidebar-responsive\" : \"\"} id=\"sidebar\">\n        <div className=\"sidebar__title\">\n            <div className=\"sidebar__img\">\n                <img src={logo} alt=\"logo\" />\n                <DineMateTitle/>\n            </div>\n            <i className=\"fa fa-times\" id=\"sidebarIcon\" onClick={() => closeSidebar()}/>\n        </div>\n\n        <div className=\"sidebar__menu\">\n            <div className={`sidebar__link ${pathname.includes('/dashboard') ? 'active_menu_link' : null}`}>\n                <i className=\"fa fa-home\"/>\n                <Link to={`${url}`}>Dashboard</Link>\n            </div>\n            {!admin.restaurantId ?\n                <>\n                    <h2>Super Admin</h2>\n                    <div className={`sidebar__link ${pathname.includes('/addRestaurant') ? 'active_menu_link' : null}`}>\n                        <i className=\"fa fa-plus\"/>\n                        <Link to={`${url}/addRestaurant`}>Add Restaurants</Link>\n                    </div>\n                    <div className={`sidebar__link ${pathname.includes('/restaurants') ? 'active_menu_link' : null}`}>\n                        <i className=\"fa fa-building-o\"/>\n                        <Link to={`${url}/restaurants`}>Restaurants Management</Link>\n                    </div>\n                    <div className={`sidebar__link sidebar_disabled_link ${pathname.includes('/qrsManagement') ? 'active_menu_link' : null}`}>\n                        <i className=\"fa fa-qrcode\"/>\n                        <Link to={pathname}>QRs Management</Link>\n                    </div>\n                    <div className={`sidebar__link sidebar_disabled_link ${pathname.includes('/viewQr') ? 'active_menu_link' : null}`}>\n                        <i className=\"fa fa-barcode\"/>\n                        <Link to={pathname}>View QR</Link>\n                    </div>\n                    <div className={`sidebar__link sidebar_disabled_link ${pathname.includes('/editRestaurant') ? 'active_menu_link' : null}`}>\n                        <i className=\"fa fa-edit\"/>\n                        <Link to={pathname}>Edit Restaurant</Link>\n                    </div>\n                </> :\n                <>\n                    <h2>Restaurant Admin</h2>\n                    <div className={`sidebar__link ${pathname.includes('/tablesManagement') ? 'active_menu_link' : null}`}>\n                        <i className=\"fa fa-building-o\" />\n                        <Link to={`${url}/tablesManagement`}>Tables Management</Link>\n                    </div>\n                    <div className={`sidebar__link ${pathname.includes('/others') ? 'active_menu_link' : null}`}>\n                        <i className=\"fa fa-wrench\" />\n                        <Link to={`${url}/others`}>Company Management</Link>\n                    </div>\n                    <div className=\"sidebar__link\">\n                        <i className=\"fa fa-user-secret\" />\n                        <Link to={`${url}/adc`}>Employee Management</Link>\n                    </div>\n                    <div className=\"sidebar__link\">\n                        <i className=\"fa fa-archive\" />\n                        <Link to={`${url}/adc`}>Warehouse</Link>\n                    </div>\n                    <div className=\"sidebar__link\">\n                        <i className=\"fa fa-handshake-o\" />\n                        <Link to={`${url}/adc`}>Contracts</Link>\n                    </div>\n                    <div className=\"sidebar__link\">\n                        <i className=\"fa fa-question\" />\n                        <Link to={`${url}/adc`}>Requests</Link>\n                    </div>\n                    <div className=\"sidebar__link\">\n                        <i className=\"fa fa-sign-out\" />\n                        <Link to={`${url}/adc`}>Leave Policy</Link>\n                    </div>\n                    <div className=\"sidebar__link\">\n                        <i className=\"fa fa-files-o\" />\n                        <Link to={`${url}/adc`}>Apply for Leaves</Link>\n                    </div>\n                    {admin.role === \"SuperAdmin\" ?\n                        <div className=\"LeaveButtonContainer\">\n                            <SmallButtonRed\n                                text=\"Leave Restaurant\"\n                                onClick={() => {\n                                    dispatch(customisedAction(RESET_RESTAURANT))\n                                    props.history.push('/admin')\n                                }}/>\n                        </div>\n                    : null}\n                </>\n            }\n        </div>\n    </div>)\n}\n\nexport default withRouter(SideBar)\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/NavBar/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Admin/Restaurants/index.js",["275","276"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { customisedAction } from '../../../redux/actions'\nimport { GET_ALL_RESTAURANTS } from '../../../constants'\n\nimport { Button, Input } from '../../../components'\n\nimport RestaurantsList from './RestaurantsList'\n\nfunction Restaurants(props) {\n\n  const [restaurantsFetchCalled, setrestaurantsFetchCalled] = useState(false)\n  const [filterKey, setfilterKey] = useState('')\n\n  const fetchingRestaurants = useSelector(({ restaurantsReducer }) => restaurantsReducer.fetchingRestaurants)\n  const restaurants = useSelector(({ restaurantsReducer }) => restaurantsReducer.restaurants)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (!restaurantsFetchCalled && !fetchingRestaurants && !restaurants) {\n      setrestaurantsFetchCalled(true)\n      dispatch(customisedAction(GET_ALL_RESTAURANTS))\n    }\n  }, [])\n\n  const getFilteredRestaurants = () => {\n    let filteredRestaurants = restaurants\n    if (filterKey && filterKey.length && restaurants) {\n      filteredRestaurants = restaurants.filter(\n        (restaurant) => restaurant.restaurantName.toLowerCase().includes(filterKey.toLowerCase())\n        || restaurant.restaurantId.toLowerCase().includes(filterKey.toLowerCase())\n        || restaurant.cuisine.toLowerCase().includes(filterKey.toLowerCase())\n        || restaurant.adminName.toLowerCase().includes(filterKey.toLowerCase())\n        || restaurant.city.toLowerCase().includes(filterKey.toLowerCase())\n        || restaurant.qrCounts == filterKey\n      )\n    }\n    return filteredRestaurants\n  }\n\n  return (\n    <div className=\"Container\">\n      <h2>Restaurants Management</h2>\n      <div className=\"TopOptionsContainer\">\n        <div className=\"TopInputContainer\">\n          <Input \n            placeholder=\"Search Restaurants\"\n            value={filterKey}\n            onChange={({ target: { value } }) => setfilterKey(value)}\n          />\n        </div>\n        <div className=\"TopButtonContainer\">\n          <Button\n            text=\"Refresh\"\n            iconLeft={<i className=\"fa fa-refresh\" />}\n            onClick={() => dispatch(customisedAction(GET_ALL_RESTAURANTS))} />\n        </div>\n      </div>\n      {fetchingRestaurants ?\n        <div className=\"loadingContainer\">\n          <p><i className=\"fa fa-refresh\" style={{ paddingRight: '5px' }} />Fetching Restaurants . . .</p>\n        </div> : null\n      }\n      <RestaurantsList history={props.history} restaurants={getFilteredRestaurants()} />\n    </div>\n  )\n}\n\nexport default Restaurants\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/GenerateQrs/index.js",["277"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { customisedAction } from '../../../redux/actions'\nimport { SET_TOAST, SET_TOAST_DISMISSING, GENERATE_QRS, GET_EXISTING_QRS } from '../../../constants'\n\nimport { Button, Input } from '../../../components'\n\nimport QrsList from './QrsList'\n\nfunction GenerateQrs(props) {\n  \n  const [qrsFetchCalled, setqrsFetchCalled] = useState(false)\n  const [generateQrInput, setgenerateQrInput] = useState('')\n  const [qrCounts, setqrCounts] = useState(0)\n\n  const generatingQrs = useSelector(({ restaurantReducer }) => restaurantReducer.generatingQrs)\n  const fetchingQrs = useSelector(({ restaurantReducer }) => restaurantReducer.fetchingQrs)\n  const qrs = useSelector(({ restaurantReducer }) => restaurantReducer.qrs)\n  const dispatch = useDispatch()\n\n  const { location: { state }, history } = props\n\n  useEffect(() => {\n    if (!state) {\n      history.push('/')\n    } else if (qrs && qrs.length) {\n      setqrCounts(qrs.length)\n    } else {\n      setqrCounts(state.qrCounts)\n    }\n\n    if (state && !qrsFetchCalled && !fetchingQrs && !qrs) {\n      setqrsFetchCalled(true)\n      dispatch(customisedAction(GET_EXISTING_QRS, { restaurantId: state.restaurantId }))\n    }\n  }, [qrs, qrsFetchCalled])\n\n  const generateQrs = () => {\n    if (!generateQrInput || generateQrInput < 1 || isNaN(generateQrInput)) {\n      dispatch(customisedAction(SET_TOAST_DISMISSING, true))\n      dispatch(customisedAction(SET_TOAST, { message: 'Input must be a number greater than zero!', type: 'error'}))\n    } else {\n      const generatedQrData = {\n        \"restaurantId\": state.restaurantId,\n        values: []\n      }\n      for (let index = qrCounts; index < Number(qrCounts)+Number(generateQrInput); index++) {\n        generatedQrData.values.push(`${state.restaurantId}/${index+1}`)\n      }\n      setgenerateQrInput('')\n      dispatch(customisedAction(GENERATE_QRS, generatedQrData))\n    }\n  }\n\n  return (\n    <div className=\"Container\">\n      <h2>QRs Management</h2>\n      <div className=\"TopOptionsContainer\">\n        <div className=\"TopInputContainer\">\n          <Input \n            placeholder=\"Number of Qrs you want to generate ?\"\n            value={generateQrInput}\n            onChange={({ target: { value } }) => setgenerateQrInput(value)}\n          />\n        </div>\n        <div className=\"TopButtonContainer\" style={{ justifyContent: 'flex-start' }}>\n          <Button\n            text=\"Generate\"\n            light={generatingQrs || fetchingQrs}\n            lightAction={() => null}\n            onClick={() => generateQrs()}\n          />\n        </div>\n      </div>\n      {fetchingQrs ?\n        <div className=\"loadingContainer\">\n          <p><i className=\"fa fa-refresh\" style={{ paddingRight: '5px' }} />Fetching Qrs!</p>\n        </div> : null\n      }\n      <QrsList restaurantId={state && state.restaurantId} history={history} />\n    </div>\n  )\n}\n\nexport default GenerateQrs\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/ViewQr/index.js",["278"],"import React, { useEffect, useState } from 'react'\nimport QRCode from \"qrcode.react\";\n\nimport { CUSTOMER_APP_URL } from '../../../constants'\n\nimport { Button } from '../../../components'\nimport './styles.css'\n\nfunction ViewQr(props) {\n\n  const [selectedQr, setselectedQr] = useState(null)\n\n  const { location: { state }, history } = props\n\n  useEffect(() => {\n    if (!state) {\n      history.push('/')\n    } else {\n      setselectedQr(state.qr)\n    }\n  }, [])\n\n  return (\n    <div className=\"Container\">\n      <h2>View QR</h2>\n      <div className=\"QrContainer\">\n        <div className=\"QrInnerContainer\" id=\"QrInnerContainer\">\n          {selectedQr ? \n            <QRCode\n              id={selectedQr.id}\n              value={CUSTOMER_APP_URL+\"restaurant/\"+selectedQr.value}\n              size={200}\n            /> : null\n          }\n          <h3 style={{ marginTop: '10px' }}>Dine Mate</h3>\n        </div>\n      <Button\n        style={{ marginTop: '15px' }}\n        text=\"Back\"\n        onClick={() => history.goBack()}\n      />\n      </div>\n    </div>\n  )\n}\n\nexport default ViewQr\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Tables/index.js",["279","280"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { customisedAction } from '../../../redux/actions'\nimport { GET_EXISTING_QRS } from '../../../constants'\n\nimport { Button, Input } from '../../../components'\n\nimport TablesList from './TablesList'\n\nfunction Tables(props) {\n\n  const [qrFetchCalled, setqrFetchCalled] = useState(false)\n  const [filterKey, setfilterKey] = useState('')\n\n  const fetchingQrs = useSelector(({ restaurantReducer }) => restaurantReducer.fetchingQrs)\n  const qrs = useSelector(({ restaurantReducer }) => restaurantReducer.qrs)\n  const admin = useSelector(({ sessionReducer }) => sessionReducer.admin)\n  const dispatch = useDispatch()\n\n  const { restaurantId } = admin\n\n  useEffect(() => {\n    if (!qrFetchCalled && !fetchingQrs && !qrs) {\n      setqrFetchCalled(true)\n      dispatch(customisedAction(GET_EXISTING_QRS, { restaurantId }))\n    }\n  }, [])\n\n  const getFilteredQrs = () => {\n    let filteredQrs = qrs\n    if (filterKey && filterKey.length && qrs) {\n      filteredQrs = qrs.filter(\n        (qr) => qr.value.toLowerCase().includes(filterKey.toLowerCase())\n        || qr.active == filterKey\n      )\n    }\n    return filteredQrs\n  }\n\n  return (\n    <div className=\"Container\">\n      <h2>Tables Management</h2>\n      <div className=\"TopOptionsContainer\">\n        <div className=\"TopInputContainer\">\n          <Input \n            placeholder=\"Search Restaurants\"\n            value={filterKey}\n            onChange={({ target: { value } }) => setfilterKey(value)}\n          />\n        </div>\n        <div className=\"TopButtonContainer\">\n          <Button\n            text=\"Refresh\"\n            iconLeft={<i className=\"fa fa-refresh\" />}\n            onClick={() => dispatch(customisedAction(GET_EXISTING_QRS, { restaurantId }))} />\n        </div>\n      </div>\n      {fetchingQrs ?\n        <div className=\"loadingContainer\">\n          <p><i className=\"fa fa-refresh\" style={{ paddingRight: '5px' }} />Fetching Tables . . .</p>\n        </div> : null\n      }\n      <TablesList history={props.history} restaurantId={restaurantId} tables={getFilteredQrs()} />\n    </div>\n  )\n}\n\nexport default Tables\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/TableDetails/index.js",["281"],"import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport QRCode from \"qrcode.react\";\n\nimport { CUSTOMER_APP_URL, SET_TABLE_NAME } from '../../../constants'\nimport { customisedAction } from '../../../redux/actions';\nimport { Button, Input } from '../../../components'\nimport './styles.css'\n\nfunction TableDetails(props) {\n\n  const [selectedTable, setselectedTable] = useState(null)\n  const [tableName, settableName] = useState('')\n  \n  const settingTableName = useSelector(({ restaurantReducer }) => restaurantReducer.settingTableName)\n  const dispatch = useDispatch()\n\n  const { location: { state }, history } = props\n\n  useEffect(() => {\n    if (!state) {\n      history.push('/')\n    } else {\n      setselectedTable(state.table)\n      settableName(state.table.tableName)\n    }\n  }, [])\n\n  const downloadQR = () => {\n    const canvas = document.getElementById(selectedTable.id);\n    const pngUrl = canvas\n      .toDataURL(\"image/png\")\n      .replace(\"image/png\", \"image/octet-stream\");\n    let downloadLink = document.createElement(\"a\");\n    downloadLink.href = pngUrl;\n    downloadLink.download = `${selectedTable.value}.png`;\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  }\n\n  return (\n    <div className=\"Container\">\n      <h2>Table Details</h2>\n      {selectedTable ?\n        <div className=\"TableContainer\">\n          <div className=\"TableDetailsContainer\">\n            <div className=\"TableDetailsSections\">\n              <h4>Restaurant ID:</h4>\n              <p>{state.restaurantId}</p>\n            </div>\n            <div className=\"TableDetailsSections\">\n              <h4>Status:</h4>\n              <p>{selectedTable.active ? 'Active' : 'In-Active'}</p>\n            </div>\n            <div className=\"TableDetailsSections\">\n              <h4>Table No:</h4>\n              <p>\n                {selectedTable.value.replace(`${state.restaurantId}/`, '').length === 1 ? '0' : null}\n                {selectedTable.value.replace(`${state.restaurantId}/`, '')}\n              </p>\n            </div>\n            <div className=\"TableDetailsSections\">\n              <h4>Table Name:</h4>\n              <div className=\"TableNameContainer\">\n                <Input\n                  style={{ margin: '0px' }}\n                  placeholder=\"Enter Table Name\"\n                  value={tableName}\n                  onChange={({ target: { value } }) => settableName(value)}\n                />\n              </div>\n            </div>\n            <div className=\"TableNameButtonContainer\">\n              {tableName && tableName !== selectedTable.tableName ?\n                <Button\n                  text=\"Update\"\n                  light={settingTableName}\n                  lightAction={() => null}\n                  onClick={() => dispatch(customisedAction(SET_TABLE_NAME, { \n                    id: selectedTable.id, \n                    tableName, \n                    restaurantId: state.restaurantId,\n                    history\n                  }))}\n                />\n              : null}\n            </div>\n          </div>\n          <div className=\"QrInnerContainer\">\n            <QRCode\n              id={selectedTable.id}\n              value={CUSTOMER_APP_URL+\"restaurant/\"+selectedTable.value}\n              size={200}\n            />\n          </div>\n        </div>\n      : null}\n      <Button\n        style={{ width: '100%', marginTop: '15px' }}\n        text=\"Back\"\n        light\n        lightAction={() => history.goBack()}\n      />\n      <Button\n        style={{ width: '100%', marginTop: '15px' }}\n        text=\"Download\"\n        onClick={() => downloadQR()}\n      />\n      <Button\n        style={{ width: '100%', marginTop: '15px', marginBottom: '15px' }}\n        text=\"Print\"\n        light\n        lightAction={() => window.print()}\n      />\n    </div>\n  )\n}\n\nexport default TableDetails\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Others/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Admin/Dashboard/SuperAdmin/index.js",["282"],"import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Button, DashboardBatches } from '../../../../components'\nimport { GET_SUPER_ADMIN_DASHBOARD } from '../../../../constants'\nimport { customisedAction } from '../../../../redux/actions'\n\nimport '../styles.css'\n\nfunction SuperAdmin(props) {\n\n  const fetchingDashboard = useSelector(({ sessionReducer }) => sessionReducer.fetchingDashboard)\n  const adminDashboard = useSelector(({ sessionReducer }) => sessionReducer.adminDashboard)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (!adminDashboard)\n      dispatch(customisedAction(GET_SUPER_ADMIN_DASHBOARD))\n  }, [])\n\n  return (\n    <div className=\"Container\">\n      <div className=\"PageTitleContainer\">\n        <h2>Dashboard</h2>\n        <div className=\"PageTitleButtonContainer\">\n          <Button\n            text=\"Refresh\"\n            iconLeft={<i className=\"fa fa-refresh\" />}\n            onClick={() => dispatch(customisedAction(GET_SUPER_ADMIN_DASHBOARD))} />\n        </div>\n      </div>\n      <div className=\"DashBoardContainer\">\n        {fetchingDashboard ?\n          <div className=\"loadingContainer\">\n            <p><i className=\"fa fa-refresh\" style={{ paddingRight: '5px' }} />Fetching Dashboard Data . . .</p>\n          </div> : null\n        }\n        {adminDashboard ? <>\n          <div className=\"DashBoardSectionsContainer\">\n            <DashboardBatches\n              text={`${adminDashboard.restaurants} Restaurants`}\n              iconName=\"fa fa-cutlery\"\n              onClick={() => props.history.push('/admin/restaurants')}\n            />\n            <DashboardBatches\n              text={`${adminDashboard.admins} Admins`}\n              iconName=\"fa fa-user\"\n              onClick={() => null}\n            />\n          </div>\n          <div className=\"DashBoardSectionsContainer\">\n            <DashboardBatches\n              text={`${adminDashboard.qrs} QRs`}\n              iconName=\"fa fa-qrcode\"\n              onClick={() => null}\n            />\n          </div>\n        </> : null}\n      </div>\n    </div>\n  )\n}\n\nexport default SuperAdmin\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/Dashboard/RestaurantAdmin/index.js",["283","284"],"import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { Button, DashboardBatches } from '../../../../components'\nimport { GET_SUPER_ADMIN_DASHBOARD } from '../../../../constants'\nimport { customisedAction } from '../../../../redux/actions'\n\nfunction RestaurantAdmin(props) {\n\n  const fetchingDashboard = useSelector(({ sessionReducer }) => sessionReducer.fetchingDashboard)\n  const restaurantDashboard = useSelector(({ sessionReducer }) => sessionReducer.restaurantDashboard)\n  const dispatch = useDispatch()\n\n  // useEffect(() => {\n  //   if (!restaurantDashboard)\n  //     dispatch(customisedAction(GET_SUPER_ADMIN_DASHBOARD))\n  // }, [])\n\n  return (\n    <div className=\"Container\">\n      <div className=\"PageTitleContainer\">\n        <h2>Restaurant Dashboard</h2>\n        <div className=\"PageTitleButtonContainer\">\n          <Button\n            text=\"Refresh\"\n            iconLeft={<i className=\"fa fa-refresh\" />}\n            onClick={() => dispatch(customisedAction(GET_SUPER_ADMIN_DASHBOARD))} />\n        </div>\n      </div>\n      <div className=\"DashBoardContainer\">\n        {fetchingDashboard ?\n          <div className=\"loadingContainer\">\n            <p><i className=\"fa fa-refresh\" style={{ paddingRight: '5px' }} />Fetching Dashboard Data . . .</p>\n          </div> : null\n        }\n        {/* {restaurantDashboard ? <> */}\n          <div className=\"DashBoardSectionsContainer\">\n            <DashboardBatches\n              text=\"10 Open Checks\"\n              iconName=\"fa fa-coffee\"\n              onClick={() => null}\n            />\n            <DashboardBatches\n              text=\"100 Closed Checks\"\n              iconName=\"fa fa-ban\"\n              onClick={() => null}\n            />\n          </div>\n          <div className=\"DashBoardSectionsContainer\">\n            <DashboardBatches\n              text=\"10 Active Tables\"\n              iconName=\"fa fa-table\"\n              onClick={() => props.history.push('/admin/tablesManagement')}\n            />\n          </div>\n        {/* </> : null} */}\n      </div>\n    </div>\n  )\n}\n\nexport default RestaurantAdmin\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/AddRestaurant/index.js",["285","286"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { customisedAction } from '../../../redux/actions'\nimport { SET_TOAST, SET_TOAST_DISMISSING, ADD_RESTAURANT } from '../../../constants'\n\nimport { Button, Input, SectionHeading, SmallTitle } from '../../../components'\nimport './styles.css'\n\nfunction AddRestaurant(props) {\n\n  const [restaurantId, setrestaurantId] = useState('')\n  const [restaurantName, setrestaurantName] = useState('')\n  const [cuisine, setcuisine] = useState('')\n  const [address, setaddress] = useState('')\n  const [city, setcity] = useState('')\n  const [country, setcountry] = useState('')\n  const [latitude, setlatitude] = useState('')\n  const [longitude, setlongitude] = useState('')\n  const [pName, setpName] = useState('')\n  const [pEmail, setpEmail] = useState('')\n  const [pPhoneNumber, setpPhoneNumber] = useState('')\n  const [sName, setsName] = useState('')\n  const [sEmail, setsEmail] = useState('')\n  const [sPhoneNumber, setsPhoneNumber] = useState('')\n\n  const addingUpdatingRestaurant = useSelector(({ restaurantsReducer }) => restaurantsReducer.addingUpdatingRestaurant)\n  const dispatch = useDispatch()\n\n  const setRestaurantNameAndId = (name) => {\n    let tempRestaurantId\n    if (name)\n      tempRestaurantId = name.replaceAll(' ', '_').replaceAll('\\'', '').replaceAll(',', '').replaceAll('.', '')\n    else tempRestaurantId = null\n\n    if (tempRestaurantId && tempRestaurantId.replaceAll('_', '')) {\n      setrestaurantName(name)\n      setrestaurantId(tempRestaurantId.toLowerCase())\n    } else {\n      setrestaurantName('')\n      setrestaurantId('')\n    }\n  }\n\n  const validate = () => {\n    if (!restaurantName)\n      return 'Restaurant Name Required!'\n    if (!cuisine)\n      return 'Restaurant Cuisine Required!'\n    if (!city)\n      return 'Restaurant City Required!'\n    if (!country)\n      return 'Restaurant Country Required!'\n    if (!address)\n      return 'Detailed Address Required!'\n    if (!pName)\n      return 'Primary Contact Name Required!'\n    if (!pEmail)\n      return 'Primary Contact Email Required!'\n    if (!pPhoneNumber)\n      return 'Primary Contact Number Required!'\n    if (sEmail && !sName)\n      return 'Secondary Contact Name Required!'\n    if (sName && !sEmail)\n      return 'Secondary Contact Email Required!'\n    return false\n  }\n\n  const addRestuarant = () => {\n    const payload = {\n      restaurantId,\n      restaurantName,\n      cuisine,\n      address: {\n        address,\n        city,\n        country,\n        latitude,\n        longitude\n      },\n      primaryContact: {\n        adminName: pName,\n        email: pEmail,\n        contactNumber: pPhoneNumber\n      },\n      secondaryContact: null\n    }\n    if (sName && sEmail) {\n      payload.secondaryContact = {\n        adminName: sName,\n        email: sEmail,\n        contactNumber: sPhoneNumber\n      }\n    }\n    dispatch(customisedAction(SET_TOAST_DISMISSING))\n    dispatch(customisedAction(ADD_RESTAURANT, payload, { history: props.history }))\n  }\n\n  return (\n    <div className=\"Container\">\n      <h2>Add Restaurant</h2>\n      <div className=\"FormContainer\">\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Restaurant Information\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Name\" />\n              <Input \n                placeholder=\"Eg. (ABC Restaurant)\"\n                value={restaurantName}\n                onChange={({ target: { value } }) => setRestaurantNameAndId(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\" style={{ flexDirection: 'row', paddingTop: '0px' }}>\n              <div className=\"InputsInnerContainer\" style={{ width: '50%', paddingRight: '7px' }}>\n                <SmallTitle text=\"Cuisine\" />\n                <Input \n                  placeholder=\"Eg. (Traditional)\"\n                  value={cuisine}\n                  onChange={({ target: { value } }) => setcuisine(value)}\n                />\n              </div>\n              <div className=\"InputsInnerContainer\" style={{ width: '50%', paddingLeft: '7px' }}>\n                <SmallTitle text=\"City\" />\n                <Input \n                  placeholder=\"Eg. (Karachi)\"\n                  value={city}\n                  onChange={({ target: { value } }) => setcity(value)}\n                />\n              </div>\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Country\" />\n              <Input \n                placeholder=\"Eg. (Pakistan)\"\n                value={country}\n                onChange={({ target: { value } }) => setcountry(value)}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Business Address\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Map\" />\n              <div style={{ marginTop: '10px', width: '100%', height: '140px', background: 'rgba(0, 0, 0, 0.5)' }}/>\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Detailed Address\" />\n              <Input \n                placeholder=\"Eg. (Block - A, Street, State)\"\n                value={address}\n                onChange={({ target: { value } }) => setaddress(value)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"FormContainer\">\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Primary Contact Information\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Name\" />\n              <Input \n                placeholder=\"Eg. (John Doe)\"\n                value={pName}\n                onChange={({ target: { value } }) => setpName(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Email\" />\n              <Input \n                placeholder=\"Eg. (john.doe@abcrestaurant.com)\"\n                value={pEmail}\n                onChange={({ target: { value } }) => setpEmail(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Phone Number\" />\n              <Input \n                placeholder=\"Eg. (+92 315 8731014)\"\n                value={pPhoneNumber}\n                onChange={({ target: { value } }) => setpPhoneNumber(value)}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Secondary Contact Information (Optional)\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Name\" />\n              <Input \n                placeholder=\"Eg. (John Doe)\"\n                value={sName}\n                onChange={({ target: { value } }) => setsName(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Email\" />\n              <Input \n                placeholder=\"Eg. (john.doe@abcrestaurant.com)\"\n                value={sEmail}\n                onChange={({ target: { value } }) => setsEmail(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Phone Number\" />\n              <Input \n                placeholder=\"Eg. (+92 315 8731014)\"\n                value={sPhoneNumber}\n                onChange={({ target: { value } }) => setsPhoneNumber(value)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"ButtonContainer\">\n        <Button\n          text=\"Add Restaurant\"\n          light={!!validate() || addingUpdatingRestaurant}\n          lightAction={() => {\n            dispatch(customisedAction(SET_TOAST_DISMISSING))\n            dispatch(customisedAction(SET_TOAST, {\n            message: validate() || 'Adding restaurant in progress',\n            type: validate() ? 'error' : 'success'\n          }))}}\n          onClick={() => addRestuarant()}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default AddRestaurant\n","/home/ubuntu/DineMate_Dev/client/src/views/Admin/EditRestaurant/index.js",["287","288"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { customisedAction } from '../../../redux/actions'\nimport { SET_TOAST, SET_TOAST_DISMISSING, ADD_RESTAURANT } from '../../../constants'\n\nimport { Button, Input, SectionHeading, SmallTitle } from '../../../components'\nimport './styles.css'\n\nfunction EditRestaurant(props) {\n\n  const [restaurantId, setrestaurantId] = useState('')\n  const [restaurantName, setrestaurantName] = useState('')\n  const [cuisine, setcuisine] = useState('')\n  const [address, setaddress] = useState('')\n  const [city, setcity] = useState('')\n  const [country, setcountry] = useState('')\n  const [latitude, setlatitude] = useState('')\n  const [longitude, setlongitude] = useState('')\n  const [pName, setpName] = useState('')\n  const [pEmail, setpEmail] = useState('')\n  const [pPhoneNumber, setpPhoneNumber] = useState('')\n  const [sName, setsName] = useState('')\n  const [sEmail, setsEmail] = useState('')\n  const [sPhoneNumber, setsPhoneNumber] = useState('')\n\n  const addingUpdatingRestaurant = useSelector(({ restaurantsReducer }) => restaurantsReducer.addingUpdatingRestaurant)\n  const dispatch = useDispatch()\n\n  const setRestaurantNameAndId = (name) => {\n    let tempRestaurantId\n    if (name)\n      tempRestaurantId = name.replaceAll(' ', '_').replaceAll('\\'', '').replaceAll(',', '').replaceAll('.', '')\n    else tempRestaurantId = null\n\n    if (tempRestaurantId && tempRestaurantId.replaceAll('_', '')) {\n      setrestaurantName(name)\n      setrestaurantId(tempRestaurantId.toLowerCase())\n    } else {\n      setrestaurantName('')\n      setrestaurantId('')\n    }\n  }\n\n  const validate = () => {\n    if (!restaurantName)\n      return 'Restaurant Name Required!'\n    if (!cuisine)\n      return 'Restaurant Cuisine Required!'\n    if (!city)\n      return 'Restaurant City Required!'\n    if (!country)\n      return 'Restaurant Country Required!'\n    if (!address)\n      return 'Detailed Address Required!'\n    if (!pName)\n      return 'Primary Contact Name Required!'\n    if (!pEmail)\n      return 'Primary Contact Email Required!'\n    if (!pPhoneNumber)\n      return 'Primary Contact Number Required!'\n    if (sEmail && !sName)\n      return 'Secondary Contact Name Required!'\n    if (sName && !sEmail)\n      return 'Secondary Contact Email Required!'\n    return false\n  }\n\n  const editRestuarant = () => {\n    const payload = {\n      restaurantId,\n      restaurantName,\n      cuisine,\n      address: {\n        address,\n        city,\n        country,\n        latitude,\n        longitude\n      },\n      primaryContact: {\n        adminName: pName,\n        email: pEmail,\n        contactNumber: pPhoneNumber\n      },\n      secondaryContact: null\n    }\n    if (sName && sEmail) {\n      payload.secondaryContact = {\n        adminName: sName,\n        email: sEmail,\n        contactNumber: sPhoneNumber\n      }\n    }\n    dispatch(customisedAction(SET_TOAST_DISMISSING))\n    dispatch(customisedAction(ADD_RESTAURANT, payload, { history: props.history }))\n  }\n\n  return (\n    <div className=\"Container\">\n      <h2>Edit Restaurant</h2>\n      <div className=\"FormContainer\">\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Restaurant Information\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Name\" />\n              <Input \n                placeholder=\"Eg. (ABC Restaurant)\"\n                value={restaurantName}\n                onChange={({ target: { value } }) => setRestaurantNameAndId(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\" style={{ flexDirection: 'row', paddingTop: '0px' }}>\n              <div className=\"InputsInnerContainer\" style={{ width: '50%', paddingRight: '7px' }}>\n                <SmallTitle text=\"Cuisine\" />\n                <Input \n                  placeholder=\"Eg. (Traditional)\"\n                  value={cuisine}\n                  onChange={({ target: { value } }) => setcuisine(value)}\n                />\n              </div>\n              <div className=\"InputsInnerContainer\" style={{ width: '50%', paddingLeft: '7px' }}>\n                <SmallTitle text=\"City\" />\n                <Input \n                  placeholder=\"Eg. (Karachi)\"\n                  value={city}\n                  onChange={({ target: { value } }) => setcity(value)}\n                />\n              </div>\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Country\" />\n              <Input \n                placeholder=\"Eg. (Pakistan)\"\n                value={country}\n                onChange={({ target: { value } }) => setcountry(value)}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Business Address\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Map\" />\n              <div style={{ marginTop: '10px', width: '100%', height: '140px', background: 'rgba(0, 0, 0, 0.5)' }}/>\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Detailed Address\" />\n              <Input \n                placeholder=\"Eg. (Block - A, Street, State)\"\n                value={address}\n                onChange={({ target: { value } }) => setaddress(value)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"FormContainer\">\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Primary Contact Information\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Name\" />\n              <Input \n                placeholder=\"Eg. (John Doe)\"\n                value={pName}\n                onChange={({ target: { value } }) => setpName(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Email\" />\n              <Input \n                placeholder=\"Eg. (john.doe@abcrestaurant.com)\"\n                value={pEmail}\n                onChange={({ target: { value } }) => setpEmail(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Phone Number\" />\n              <Input \n                placeholder=\"Eg. (+92 315 8731014)\"\n                value={pPhoneNumber}\n                onChange={({ target: { value } }) => setpPhoneNumber(value)}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"FormInnerContainer\">\n          <SectionHeading text=\"Secondary Contact Information (Optional)\" />\n          <div className=\"InputsContainer\">\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Name\" />\n              <Input \n                placeholder=\"Eg. (John Doe)\"\n                value={sName}\n                onChange={({ target: { value } }) => setsName(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Email\" />\n              <Input \n                placeholder=\"Eg. (john.doe@abcrestaurant.com)\"\n                value={sEmail}\n                onChange={({ target: { value } }) => setsEmail(value)}\n              />\n            </div>\n            <div className=\"InputsInnerContainer\">\n              <SmallTitle text=\"Phone Number\" />\n              <Input \n                placeholder=\"Eg. (+92 315 8731014)\"\n                value={sPhoneNumber}\n                onChange={({ target: { value } }) => setsPhoneNumber(value)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"ButtonContainer\">\n        <Button\n          text=\"Add Restaurant\"\n          light={!!validate() || addingUpdatingRestaurant}\n          lightAction={() => {\n            dispatch(customisedAction(SET_TOAST_DISMISSING))\n            dispatch(customisedAction(SET_TOAST, {\n            message: validate() || 'Adding restaurant in progress',\n            type: validate() ? 'error' : 'success'\n          }))}}\n          onClick={() => editRestuarant()}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default EditRestaurant\n","/home/ubuntu/DineMate_Dev/client/src/redux/epics/generalizedEpic.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Admin/Restaurants/RestaurantsList/index.js",[],["289","290"],"/home/ubuntu/DineMate_Dev/client/src/views/Admin/GenerateQrs/QrsList/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/views/Admin/Tables/TablesList/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/DineMateTitle/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/Title/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/SmallTitle/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/Input/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/Button/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/SmallButton/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/SmallButtonRed/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/SectionHeading/index.js",[],"/home/ubuntu/DineMate_Dev/client/src/components/DashboardBatches/index.js",[],{"ruleId":"291","replacedBy":"292"},{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","severity":1,"message":"296","line":40,"column":8,"nodeType":"297","endLine":40,"endColumn":10,"suggestions":"298"},{"ruleId":"295","severity":1,"message":"299","line":25,"column":6,"nodeType":"297","endLine":25,"endColumn":13,"suggestions":"300"},{"ruleId":"295","severity":1,"message":"299","line":24,"column":6,"nodeType":"297","endLine":24,"endColumn":13,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":8,"column":1,"nodeType":"304","endLine":40,"endColumn":2},{"ruleId":"302","severity":1,"message":"303","line":10,"column":1,"nodeType":"304","endLine":31,"endColumn":2},{"ruleId":"302","severity":1,"message":"303","line":14,"column":1,"nodeType":"304","endLine":39,"endColumn":2},{"ruleId":"302","severity":1,"message":"303","line":21,"column":1,"nodeType":"304","endLine":64,"endColumn":2},{"ruleId":"305","severity":1,"message":"306","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":26},{"ruleId":"295","severity":1,"message":"309","line":25,"column":6,"nodeType":"297","endLine":25,"endColumn":8,"suggestions":"310"},{"ruleId":"311","severity":1,"message":"312","line":36,"column":32,"nodeType":"313","messageId":"314","endLine":36,"endColumn":34},{"ruleId":"295","severity":1,"message":"315","line":37,"column":6,"nodeType":"297","endLine":37,"endColumn":27,"suggestions":"316"},{"ruleId":"295","severity":1,"message":"317","line":21,"column":6,"nodeType":"297","endLine":21,"endColumn":8,"suggestions":"318"},{"ruleId":"295","severity":1,"message":"319","line":28,"column":6,"nodeType":"297","endLine":28,"endColumn":8,"suggestions":"320"},{"ruleId":"311","severity":1,"message":"312","line":35,"column":22,"nodeType":"313","messageId":"314","endLine":35,"endColumn":24},{"ruleId":"295","severity":1,"message":"317","line":27,"column":6,"nodeType":"297","endLine":27,"endColumn":8,"suggestions":"321"},{"ruleId":"295","severity":1,"message":"322","line":19,"column":6,"nodeType":"297","endLine":19,"endColumn":8,"suggestions":"323"},{"ruleId":"305","severity":1,"message":"306","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":26},{"ruleId":"305","severity":1,"message":"324","line":11,"column":9,"nodeType":"307","messageId":"308","endLine":11,"endColumn":28},{"ruleId":"305","severity":1,"message":"325","line":18,"column":20,"nodeType":"307","messageId":"308","endLine":18,"endColumn":31},{"ruleId":"305","severity":1,"message":"326","line":19,"column":21,"nodeType":"307","messageId":"308","endLine":19,"endColumn":33},{"ruleId":"305","severity":1,"message":"325","line":18,"column":20,"nodeType":"307","messageId":"308","endLine":18,"endColumn":31},{"ruleId":"305","severity":1,"message":"326","line":19,"column":21,"nodeType":"307","messageId":"308","endLine":19,"endColumn":33},{"ruleId":"291","replacedBy":"327"},{"ruleId":"293","replacedBy":"328"},"no-native-reassign",["329"],"no-negated-in-lhs",["330"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'admin' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["331"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["332"],["333"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch', 'fetchingRestaurants', 'restaurants', and 'restaurantsFetchCalled'. Either include them or remove the dependency array.",["334"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dispatch', 'fetchingQrs', 'history', and 'state'. Either include them or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'history' and 'state'. Either include them or remove the dependency array.",["336"],"React Hook useEffect has missing dependencies: 'dispatch', 'fetchingQrs', 'qrFetchCalled', 'qrs', and 'restaurantId'. Either include them or remove the dependency array.",["337"],["338"],"React Hook useEffect has missing dependencies: 'adminDashboard' and 'dispatch'. Either include them or remove the dependency array.",["339"],"'restaurantDashboard' is assigned a value but never used.","'setlatitude' is assigned a value but never used.","'setlongitude' is assigned a value but never used.",["329"],["330"],"no-global-assign","no-unsafe-negation",{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"342","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"349","fix":"353"},{"desc":"354","fix":"355"},"Update the dependencies array to be: [admin, dispatch]",{"range":"356","text":"357"},"Update the dependencies array to be: [admin, props.history]",{"range":"358","text":"359"},{"range":"360","text":"359"},"Update the dependencies array to be: [dispatch, fetchingRestaurants, restaurants, restaurantsFetchCalled]",{"range":"361","text":"362"},"Update the dependencies array to be: [dispatch, fetchingQrs, history, qrs, qrsFetchCalled, state]",{"range":"363","text":"364"},"Update the dependencies array to be: [history, state]",{"range":"365","text":"366"},"Update the dependencies array to be: [dispatch, fetchingQrs, qrFetchCalled, qrs, restaurantId]",{"range":"367","text":"368"},{"range":"369","text":"366"},"Update the dependencies array to be: [adminDashboard, dispatch]",{"range":"370","text":"371"},[1462,1464],"[admin, dispatch]",[715,722],"[admin, props.history]",[729,736],[920,922],"[dispatch, fetchingRestaurants, restaurants, restaurantsFetchCalled]",[1276,1297],"[dispatch, fetchingQrs, history, qrs, qrsFetchCalled, state]",[456,458],"[history, state]",[937,939],"[dispatch, fetchingQrs, qrFetchCalled, qrs, restaurantId]",[839,841],[679,681],"[adminDashboard, dispatch]"]